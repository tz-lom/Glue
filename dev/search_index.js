var documenterSearchIndex = {"docs":
[{"location":"api/#Public-interfaces","page":"Public API","title":"Public interfaces","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"Modules = [FunctionFusion]\nOrder   = [:module, :constant, :type, :function, :macro]","category":"page"},{"location":"api/#FunctionFusion.AbstractProvider","page":"Public API","title":"FunctionFusion.AbstractProvider","text":"AbstractProvider\n\nType common for all providers. Shall implement interface with methods\n\nis_provider\ninputs\noutputs\nshort_description\nprovide\n\n\n\n\n\n","category":"type"},{"location":"api/#FunctionFusion.artifact_type-Union{Tuple{Type{<:FunctionFusion.Artifact{T}}}, Tuple{T}} where T","page":"Public API","title":"FunctionFusion.artifact_type","text":"artifact_type(Artifact)::Type\n\nGet the Type associated with an Artifact\n\nExample\n\n@artifact A = Int\nartifact_type(A) == Int\n\n\n\n\n\n","category":"method"},{"location":"api/#FunctionFusion.describe_provider-Tuple{T} where T<:FunctionFusion.AbstractProvider","page":"Public API","title":"FunctionFusion.describe_provider","text":"describe_provider(x)::AbstractProvider\n\nReturns Provider object describing the provider This function is only defined for providers, use is_provider(x) to check if x is a provider\n\n\n\n\n\n","category":"method"},{"location":"api/#FunctionFusion.inputs","page":"Public API","title":"FunctionFusion.inputs","text":"inputs(A::AbstractProvider)\n\nReturn all artifacts required by provider A\n\n\n\n\n\n","category":"function"},{"location":"api/#FunctionFusion.is_artifact-Tuple{Type{<:FunctionFusion.Artifact}}","page":"Public API","title":"FunctionFusion.is_artifact","text":"is_artifact(::Type)\n\nCheck if a given type is an Artifact.\n\n\n\n\n\n","category":"method"},{"location":"api/#FunctionFusion.is_provider-Tuple{FunctionFusion.AbstractProvider}","page":"Public API","title":"FunctionFusion.is_provider","text":"is_provider(x)::Boolean\n\nReturns true if x is declared as a provider and false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"api/#FunctionFusion.outputs","page":"Public API","title":"FunctionFusion.outputs","text":"outputs(A::AbstractProvider)\n\nReturns all artifacts provided by provider A\n\n\n\n\n\n","category":"function"},{"location":"api/#FunctionFusion.provide","page":"Public API","title":"FunctionFusion.provide","text":"provide(A::AbstractProvider, artifact::AbstractArtifact, context, parent::Union{AbstractProvider, Nothing})\n\nReturns Expr which computes requested artifact using values from context for source\n\n\n\n\n\n","category":"function"},{"location":"api/#FunctionFusion.read_function_signature-Tuple{Expr}","page":"Public API","title":"FunctionFusion.read_function_signature","text":"read_function_signature(func::Expr)::NamedTuple{(:name,:result,:arguments)}\n\nRead the signature of a provider function and return a named tuple with the function's name, result type, and argument types.\n\n\n\n\n\n","category":"method"},{"location":"api/#FunctionFusion.storage","page":"Public API","title":"FunctionFusion.storage","text":"storage(A::AbstractProvider)\n\nReturns storage container necessary for provider A\n\n\n\n\n\n","category":"function"},{"location":"api/#FunctionFusion.@algorithm-Tuple","page":"Public API","title":"FunctionFusion.@algorithm","text":"@algorithm name(Input,...)::Output = [Providers]\n\nGenerates function that implements the algorithm to compute given Outputs from Inputs using Providers\n\n\n\n\n\n","category":"macro"},{"location":"api/#FunctionFusion.@artifact-Tuple{Expr}","page":"Public API","title":"FunctionFusion.@artifact","text":"@artifact name[,name...] = Type\n\nDeclares Artifact associated with Type\n\nExample\n\n@artifact A = Int\n@artifact B,C = Bool\n\n\n\n\n\n","category":"macro"},{"location":"api/#FunctionFusion.@callback_provider-Tuple{Any}","page":"Public API","title":"FunctionFusion.@callback_provider","text":"@callback_provider Name()::CallbackTypeName = ProviderName\n\nCreates artifact CallbackTypeName which will point to argumentless function which will return result of ProviderName\n\n\n\n\n\n","category":"macro"},{"location":"api/#FunctionFusion.@conditional-Tuple{Expr}","page":"Public API","title":"FunctionFusion.@conditional","text":"@conditional name::output_artifact = bool_artifact ? input_artifact1 : input_artifact2\n\nDefines a ConditionalProvider that promotes one of the input_artifact to an output_artifact depending on a value of bool_artifact. The input_artifacts and output_artifact should be of the same type and bool_artifact shall be of type Bool\n\nExample\n\n@artifact A = Int\n@artifact B = Int\n@artifact C = Bool\n@artifact D = Int\n\n@conditional conditional::D = C ? A : B\n\n\n\n\n\n","category":"macro"},{"location":"api/#FunctionFusion.@context-Tuple{Any}","page":"Public API","title":"FunctionFusion.@context","text":"@context name = [artifacts_or_contexts...]\n\nCreates structure name which contains set of artifacts and contexts. This structure implements single write, so it's elements can be stored only once. Access to elements of the structure is done via index operator [] where key is the Artifact or Context types\n\nExample:\n\n@artifact A,B Int\n@context Ctx = [A, B]\n\nctx = Ctx()\nisnothing(ctx[A]) == true\n\nctx[A] = 1\nisnothing(ctx[A]) == false\n\n\n\n\n\n","category":"macro"},{"location":"api/#FunctionFusion.@group-Tuple{Any}","page":"Public API","title":"FunctionFusion.@group","text":"@group name = [Providers...]\n\nDeclares group of providers, such that all artifacts generated by providers are stored in that group. This can be used to group providers and give better names to set of artifacts of the group. All artifacts of the group would be available to the overlaying group / algorithm.\n\n\n\n\n\n","category":"macro"},{"location":"api/#FunctionFusion.@invoke_with-Tuple{Expr}","page":"Public API","title":"FunctionFusion.@invoke_with","text":"@invoke_with Name = AlgorithmName{Substitutions}\n\n\n\n\n\n","category":"macro"},{"location":"api/#FunctionFusion.@promote-Tuple{Any}","page":"Public API","title":"FunctionFusion.@promote","text":"@promote name(Input)::Output\n\nDefines promote provider that assigns data from the Input Artifact to the Output Artifact. Both Artifacts have to share same data type.\n\n\n\n\n\n","category":"macro"},{"location":"api/#FunctionFusion.@provider-Tuple{Expr}","page":"Public API","title":"FunctionFusion.@provider","text":"# 1 \n@provider function name(arg::Artifact, ...)::Artifact\n          ...\nend\n\n# 2\n@provider name(Artifact,...)::Artifact\n\n# 3\n@provider alias = name(Artifact, ...)::Artifact\n\nDeclares a provider with given inputs and output. All inputs + output must be unique artifacts.\n\n3 versions of the syntax are supported: 1 - function definition 2 - declare existing function as provider 3 - make an alias to existing function and declare it as a provider\n\n\n\n\n\n","category":"macro"},{"location":"api/#FunctionFusion.@switch_provider-Tuple{Any}","page":"Public API","title":"FunctionFusion.@switch_provider","text":"@switch_provider Name(Input)::Output = [Options...]\n\nCreates switch provider that will map Input to switch which of Options include in the Output If Output is a AbstractVector or Tuple then Input had to be iteratable and it will construct it for as many Input elements as it has otherwise only one Artifact would be returned\n\n\n\n\n\n","category":"macro"},{"location":"api/#FunctionFusion.@unimplemented-Tuple{Expr}","page":"Public API","title":"FunctionFusion.@unimplemented","text":"@unimplemented name(Artifact, ...)::Artifact\n\nDeclares an Unimplemented provider with given inputs and output. All inputs + output must be unique artifacts.\n\n\n\n\n\n","category":"macro"},{"location":"nested/#Nesting-of-providers","page":"Nesting of providers","title":"Nesting of providers","text":"","category":"section"},{"location":"nested/","page":"Nesting of providers","title":"Nesting of providers","text":"skinparam componentStyle rectangle\n\n[P1]\nA1 -> P1\nP1 -> A2\ncomponent N1 {\n    portout A3\n    [P2]\n    A2 --> P2\n    P2 -> A3\n}\n\n[P3]\nA3 --> P3\nP3 -> A4","category":"page"},{"location":"nested/","page":"Nesting of providers","title":"Nesting of providers","text":"P1, P3 and N1 are top - level providers P2 belongs to the N1","category":"page"},{"location":"nested/","page":"Nesting of providers","title":"Nesting of providers","text":"begin # provide(Root, A4 , :ctx)\n    if ! ctx[A4]  # A4 is the output, the first thing that we request\n        ctx[A4] = P3(begin # provide(Root, A3 , :ctx)\n            if ! ctx[A3]  # A3 is the input to P3\n                ctx[A3] = begin \n                    if ! ctx[N1][A3]  # A3 source is N1 so we ask N1 to provide it, and N1 is aware that he is sub-context so it adds `[N1]` to the context\n                        ctx[N1][A3] = P2(begin\n                            if ! ctx[N1][A2]\n                                ctx[N1][A2] = begin\n                                    if ! ctx[A2]\n                                        ctx[A2] = P1(ctx[A1]) # A1 is top level input and have to be ready from the begining\n                                    end\n                                    ctx[A2]\n                                end\n                            end\n                            ctx[N1][A2]\n                        end)\n                    end\n                    ctx[N1][A3]\n                end\n\n            end\n            ctx[A3]\n        end)\n    end\n    ctx[A4]\nend","category":"page"},{"location":"nested/","page":"Nesting of providers","title":"Nesting of providers","text":"Top level plan:","category":"page"},{"location":"nested/","page":"Nesting of providers","title":"Nesting of providers","text":"artifacts = [A1, A2, A3, A4]\nproviders = [P1, P3, N1]\ninputs = [A1]\noutputs = [A4]","category":"page"},{"location":"nested/","page":"Nesting of providers","title":"Nesting of providers","text":"Nested plan:","category":"page"},{"location":"nested/","page":"Nesting of providers","title":"Nesting of providers","text":"artifacts = [A2, A3]\nproviders = [P2]\ninputs = [A2]\noutputs = [A3]","category":"page"},{"location":"context/#Context","page":"Context","title":"Context","text":"","category":"section"},{"location":"context/","page":"Context","title":"Context","text":"Context is mutable structure which stores artifacts and allows single write and multiple read throught array-like interface.","category":"page"},{"location":"context/","page":"Context","title":"Context","text":"Context can be nested.","category":"page"},{"location":"context/#Implementation-detail","page":"Context","title":"Implementation detail","text":"","category":"section"},{"location":"context/","page":"Context","title":"Context","text":"Storing nested mutable structures is not efficient for the Julia compiler optimization pass as it can't backtrack all usages of nested structures.","category":"page"},{"location":"context/","page":"Context","title":"Context","text":"But the API of nested structures is very transparent and clear, so Context implement internal flattening of the nested structures.","category":"page"},{"location":"macros_convention/#Macros-syntax-agreements","page":"Macro convention","title":"Macros syntax agreements","text":"","category":"section"},{"location":"macros_convention/","page":"Macro convention","title":"Macro convention","text":"Macros of FunctionFusion follow the syntax convention that helps to memoize and write them. Here are those conventions:","category":"page"},{"location":"macros_convention/#Function-like","page":"Macro convention","title":"Function-like","text":"","category":"section"},{"location":"macros_convention/","page":"Macro convention","title":"Macro convention","text":"If macro defines callable entity then it will follow function like syntax. Most of the time it is a function call syntax function_name(arguments)::Output = implementation","category":"page"},{"location":"macros_convention/","page":"Macro convention","title":"Macro convention","text":"@algorithm name(inputs...)::Outputs = [Providers]\n@provider name(arg::Artifact...)::Artifact = implementation\n@provider function name(arg::Artifact...)::Artifact  implementation end\n@provider alias = name(Artifact...)::Artifact alias may look like an exception\n@promote name(Input)::Output\n@unimplemented name(Artifact, ...)::Artifact","category":"page"},{"location":"macros_convention/","page":"Macro convention","title":"Macro convention","text":"Keep a note - if implementation may have access to the arguments the arguments are specified by name and type (name1::Type1, name2::Type2), otherwithe they are just types (Type1, Type2)","category":"page"},{"location":"macros_convention/#Assignment-like","page":"Macro convention","title":"Assignment-like","text":"","category":"section"},{"location":"macros_convention/","page":"Macro convention","title":"Macro convention","text":"If macro defines something then it is using assignment syntax","category":"page"},{"location":"macros_convention/","page":"Macro convention","title":"Macro convention","text":"@artifact A1, A2 = Int\n@context Context = [A1, A2]\n@group name = [P1, P2]\n@provider alias = name(Artifact...)::Artifact alias provider is just definition of the existing function as a provider.","category":"page"},{"location":"macros_convention/#Vector-like","page":"Macro convention","title":"Vector-like","text":"","category":"section"},{"location":"macros_convention/","page":"Macro convention","title":"Macro convention","text":"If macro requires list of entities this list is written as array","category":"page"},{"location":"macros_convention/","page":"Macro convention","title":"Macro convention","text":"List of entries for @context\nList of providers for @artifact and @group","category":"page"},{"location":"macros_convention/#@todo","page":"Macro convention","title":"@todo","text":"","category":"section"},{"location":"macros_convention/","page":"Macro convention","title":"Macro convention","text":"To decide:","category":"page"},{"location":"macros_convention/","page":"Macro convention","title":"Macro convention","text":"@conditional conditional::D = C ? A : B or @conditional cond(A ? B : C)::D or @conditional cond()::D = C ? A : B\n@invoke_with Name = Algorithm{Substitutions} or @invoke_with name(Was=>Become, ...)::(Was=>Become) = Algorithmor use curly braces iso round ones","category":"page"},{"location":"visualization/","page":"-","title":"-","text":"digraph G {\n  \n//      compound=true;\n\n// b \n// a1\n// a2\n\n //{\n //  rank=same\n //  b a1 a2\n //}\n\n  \"##foo#232\" [label=\"kek\"] \n  \"##foo#233\" [label=\"kek2\"] \n\n  \"##foo#233\" -> \"##foo#232\"\n\n  subgraph cluster_3 {\n      label=\"Algorithm A\"\n      subgraph cluster_i {\n          label=\"input\"\n        a\n      }\n      subgraph  {\n          label=\"\"\n        b\n        c\n        d\n        \n        \n        subgraph cluster_2 {\n            label=\"Group 1\"\n            g\n            h [shape=\"record\", label=\"inp1|My na\\{\\}me|{outp|outp2}}\"]\n        }\n        \n      }\n      \n      subgraph cluster_o {\n          label=\"output\"\n        e\n      }\n  }\n  \n  \n  subgraph cluster_1 {\n      label=\"Algorithm B\"\n      subgraph cluster_i {\n          label=\"input\"\n        a1\n      }\n      subgraph cluser_0 {\n          label=\"\"\n        b1\n        c1\n        d1\n      }\n      \n      subgraph cluster_o {\n          label=\"output\"\n        e1\n      }\n  }\n\n  subgraph cluster_2 {\n      label=\"Algorithm C\"\n      subgraph cluster_i1 {\n          label=\"input\"\n        a2\n      }\n      subgraph cluser_01 {\n          label=\"\"\n        b2\n        c2\n        d2\n      }\n      \n      subgraph cluster_o1 {\n          label=\"output\"\n        e2\n      }\n    \n  }\n  \n  //edge [style=invis]\n // {b a1 a2} -> {c}\n\n\nedge[style=vis]\n\n  a->b\n  b->c\n  c->d\n  d->e\n  b -> g\n  g -> h\n  c->h\n  h->d\n  \n  h->a1\n  \n  ///\n  \n  \n  a1->b1\n  b1->c1\n  c1->d1\n  d1->e1\n  b1 -> d1\n\n\n  a2->b2\n  b2->c2\n  c2->d2\n  d2->e2\n  b2 -> d2\n\n//   [constraint=false;]\n  \n  \n  //edge [style=invis]\n // {b a1 a2} -> {c}\n\n      \n\n}\n","category":"page"},{"location":"visualization/#Provider","page":"-","title":"Provider","text":"","category":"section"},{"location":"visualization/","page":"-","title":"-","text":"digraph { layout=dot; compound=true;\n__provider_1 [shape=\"rectangle\",label=\"P1\",style=\"filled\",color=\"#ff8c61\",fillcolor=\"#faa275\"]\n__artifact_2 [label=\"A3\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n__artifact_3 [label=\"A1\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n__artifact_4 [label=\"A2\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n\n__provider_1 -> __artifact_2\n__artifact_3 -> __provider_1\n__artifact_4 -> __provider_1\n}","category":"page"},{"location":"visualization/#Algorithm-1","page":"-","title":"Algorithm 1","text":"","category":"section"},{"location":"visualization/","page":"-","title":"-","text":"digraph { compound=true;\nsubgraph cluster_algorithm_1 {\nlabel=\"Algorithm Gen1\"\nsubgraph cluster_algorithm_1_inputs {\nlabel=\"Inputs\"\nartifact_2 [label=\"A1\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nartifact_3 [label=\"A2\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n} // cluster_algorithm_1_inputs\nsubgraph cluster_algorithm_1_outputs {\nlabel=\"Outputs\"\nartifact_4 [label=\"A3\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n} // cluster_algorithm_1_outputs\nprovider_5 [shape=\"rectangle\",label=\"P1\",style=\"filled\",color=\"#ff8c61\",fillcolor=\"#faa275\"]\n} // cluster_algorithm_1\n\nprovider_5 -> artifact_4\nartifact_2 -> provider_5\nartifact_3 -> provider_5\n}","category":"page"},{"location":"visualization/#Algorithm-3","page":"-","title":"Algorithm 3","text":"","category":"section"},{"location":"visualization/","page":"-","title":"-","text":"digraph { compound=true;\nsubgraph cluster_algorithm_1 {\nlabel=\"Algorithm Gen3\"\nsubgraph cluster_algorithm_1_inputs {\nlabel=\"Inputs\"\nartifact_2 [label=\"A1\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nartifact_3 [label=\"A2\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n} // cluster_algorithm_1_inputs\nsubgraph cluster_algorithm_1_outputs {\nlabel=\"Outputs\"\nartifact_4 [label=\"A5\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n} // cluster_algorithm_1_outputs\nprovider_5 [shape=\"rectangle\",label=\"P3\",style=\"filled\",color=\"#ff8c61\",fillcolor=\"#faa275\"]\nartifact_6 [label=\"A4\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nprovider_7 [shape=\"rectangle\",label=\"P1\",style=\"filled\",color=\"#ff8c61\",fillcolor=\"#faa275\"]\nartifact_8 [label=\"A3\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nprovider_9 [shape=\"rectangle\",label=\"P2\",style=\"filled\",color=\"#ff8c61\",fillcolor=\"#faa275\"]\n} // cluster_algorithm_1\n\nprovider_5 -> artifact_4\nartifact_6 -> provider_5\nartifact_3 -> provider_5\nprovider_7 -> artifact_8\nartifact_2 -> provider_7\nartifact_3 -> provider_7\nprovider_9 -> artifact_6\nartifact_8 -> provider_9\n}","category":"page"},{"location":"visualization/#Conditional","page":"-","title":"Conditional","text":"","category":"section"},{"location":"visualization/","page":"-","title":"-","text":"digraph { compound=true;\nconditional_1 [shape=\"diamond\",label=\"C1\",style=\"filled\",color=\"#b23a48\",fillcolor=\"#fcb902\"]\nartifact_2 [label=\"B1\\nBool\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nartifact_3 [label=\"A1\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nartifact_4 [label=\"A2\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nartifact_5 [label=\"A3\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n\nartifact_2 -> conditional_1 [label=\"?\"]\nartifact_3 -> conditional_1 [label=\"true\"]\nartifact_4 -> conditional_1 [label=\"false\"]\nconditional_1 -> artifact_5\n}","category":"page"},{"location":"visualization/#Promote","page":"-","title":"Promote","text":"","category":"section"},{"location":"visualization/","page":"-","title":"-","text":"digraph { compound=true;\npromote_1 [shape=\"rpromoter\",label=\"P4\",style=\"filled\",color=\"#ff8c61\",fillcolor=\"#faa275\"]\nartifact_2 [label=\"A2\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nartifact_3 [label=\"A1\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n\npromote_1 -> artifact_2\nartifact_3 -> promote_1\n}","category":"page"},{"location":"visualization/#Group","page":"-","title":"Group","text":"","category":"section"},{"location":"visualization/","page":"-","title":"-","text":"digraph { compound=true;\nsubgraph cluster_conditional_1 {\nlabel=\"Group G1\"\nprovider_2 [shape=\"rectangle\",label=\"P1\",style=\"filled\",color=\"#ff8c61\",fillcolor=\"#faa275\"]\nartifact_3 [label=\"A3\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nartifact_4 [label=\"A1\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nartifact_5 [label=\"A2\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nprovider_6 [shape=\"rectangle\",label=\"P5\",style=\"filled\",color=\"#ff8c61\",fillcolor=\"#faa275\"]\nartifact_7 [label=\"A5\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n} // cluster_conditional_1\n\nprovider_2 -> artifact_3\nartifact_4 -> provider_2\nartifact_5 -> provider_2\nprovider_6 -> artifact_7\nartifact_4 -> provider_6\n}","category":"page"},{"location":"visualization/#Unimplemented","page":"-","title":"Unimplemented","text":"","category":"section"},{"location":"visualization/","page":"-","title":"-","text":"digraph { compound=true;\nunimplemented_1 [shape=\"rectangle\",label=\"Unimplemented U1\",color=\"#ff8c61\"]\nartifact_2 [label=\"A2\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nartifact_3 [label=\"A1\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n\nunimplemented_1 -> artifact_2\nartifact_3 -> unimplemented_1\n}","category":"page"},{"location":"visualization/#Invoke-with","page":"-","title":"Invoke with","text":"","category":"section"},{"location":"visualization/","page":"-","title":"-","text":"digraph { compound=true;\ninvoke_1 [shape=\"record\",label=\"{{<invoke_1_input_2>A1|<invoke_1_input_3>A4⇥A2}|I1|{<invoke_1_output_4>A3}}\"]\nsubgraph cluster_algorithm_5 {\nlabel=\"Algorithm Gen1\"\nsubgraph cluster_algorithm_5_inputs {\nlabel=\"Inputs\"\nartifact_6 [label=\"A1\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nartifact_7 [label=\"A2\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n} // cluster_algorithm_5_inputs\nsubgraph cluster_algorithm_5_outputs {\nlabel=\"Outputs\"\nartifact_8 [label=\"A3\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n} // cluster_algorithm_5_outputs\nprovider_9 [shape=\"rectangle\",label=\"P1\",style=\"filled\",color=\"#ff8c61\",fillcolor=\"#faa275\"]\n} // cluster_algorithm_5\nartifact_10 [label=\"A4\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n\nprovider_9 -> artifact_8\nartifact_6 -> provider_9\nartifact_7 -> provider_9\nartifact_8 -> invoke_1:invoke_1_output_4\ninvoke_1:invoke_1_input_2 -> artifact_6\ninvoke_1:invoke_1_input_3 -> artifact_7\nartifact_10 -> invoke_1:invoke_1_input_3\n}","category":"page"},{"location":"visualization/#Compound","page":"-","title":"Compound","text":"","category":"section"},{"location":"visualization/","page":"-","title":"-","text":"digraph { compound=true; \nsubgraph cluster_algorithm_1 {\nlabel=\"Algorithm Gen4\"\nsubgraph cluster_algorithm_1_inputs {\nlabel=\"Inputs\"\nartifact_2 [label=\"A1\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nartifact_3 [label=\"A2\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nartifact_4 [label=\"A4\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n} // cluster_algorithm_1_inputs\nsubgraph cluster_algorithm_1_outputs {\nlabel=\"Outputs\"\nartifact_5 [label=\"A7\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n} // cluster_algorithm_1_outputs\ninvoke_6 [shape=\"record\",label=\"{{<invoke_6_input_7>A1|<invoke_6_input_8>A4⇥A2}|I1|{<invoke_6_output_9>A3}}\"]\ninvoke_13 [shape=\"record\",label=\"{{<invoke_13_input_14>A1|<invoke_13_input_15>A5⇥A2}|I2|{<invoke_13_output_16>A6⇥A3}}\"]\nartifact_17 [label=\"A6\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nartifact_18 [label=\"A5\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\nprovider_19 [shape=\"rectangle\",label=\"P2\",style=\"filled\",color=\"#ff8c61\",fillcolor=\"#faa275\"]\nprovider_20 [shape=\"rectangle\",label=\"P5\",style=\"filled\",color=\"#ff8c61\",fillcolor=\"#faa275\"]\n\n} // cluster_algorithm_1\n\nsubgraph cluster_algorithm_10 {\nlabel=\"Algorithm Gen1\"\nsubgraph cluster_algorithm_10_inputs {\nlabel=\"Inputs\"\n} // cluster_algorithm_10_inputs\nsubgraph cluster_algorithm_10_outputs {\nlabel=\"Outputs\"\nartifact_11 [label=\"A3\\nInt64\",shape=\"ellipse\",style=\"filled\",color=\"#4a7c59\",fillcolor=\"#8fc0a9\"]\n} // cluster_algorithm_10_outputs\nprovider_12 [shape=\"rectangle\",label=\"P1\",style=\"filled\",color=\"#ff8c61\",fillcolor=\"#faa275\"]\n} // cluster_algorithm_10\n\nsubgraph cluster_algorithm_21 {\nlabel=\"Algorithm Gen3\"\nsubgraph cluster_algorithm_21_inputs {\nlabel=\"Inputs\"\n} // cluster_algorithm_21_inputs\nsubgraph cluster_algorithm_21_outputs {\nlabel=\"Outputs\"\n} // cluster_algorithm_21_outputs\nprovider_22 [shape=\"rectangle\",label=\"P3\",style=\"filled\",color=\"#ff8c61\",fillcolor=\"#faa275\"]\n} // cluster_algorithm_21\n\n//edge [style=invis]\n//{b a1 a2} -> {c}  \n\n\nprovider_12 -> artifact_11\nartifact_2 -> provider_12\nartifact_3 -> provider_12\nartifact_11 -> invoke_6:invoke_6_output_9\n//invoke_6:invoke_6_input_7 -> artifact_2\nartifact_2 -> invoke_6:invoke_6_input_7 \ninvoke_6:invoke_6_input_8 -> artifact_3\nartifact_4 -> invoke_6:invoke_6_input_8\nartifact_11 -> invoke_13:invoke_13_output_16\ninvoke_13:invoke_13_output_16 -> artifact_17\ninvoke_13:invoke_13_input_14 -> artifact_2\ninvoke_13:invoke_13_input_15 -> artifact_3\nartifact_18 -> invoke_13:invoke_13_input_15\nprovider_19 -> artifact_4\nartifact_11 -> provider_19\nprovider_20 -> artifact_5\nartifact_11 -> provider_20\nartifact_17 -> provider_20\nprovider_22 -> artifact_18\nartifact_4 -> provider_22\nartifact_3 -> provider_22\n}","category":"page"},{"location":"visualization/#Test","page":"-","title":"Test","text":"","category":"section"},{"location":"visualization/","page":"-","title":"-","text":"digraph { compound=true;\n\nsubgraph cluster_1 {\n  label=\"Algorithm N2\"\n  cluster_1_inputs [shape=\"record\", label=\"inputs|<cluster_1_inputs_1>A1\"]\n  \n  cluster_1_outputs [shape=\"record\", label=\"outputs|<cluster_1_outputs_1>A2\"]\n\n//}\n\nsubgraph cluster_4 {\n  label=\"Algorithm N1\"\n  subgraph cluster_5 {\n    label=\"Inputs\"\n    A1_N1\n  }\n  subgraph cluster_6 {\n    label=\"Outputs\"\n    A2_N1\n  }\n  P1\n}\n\n\n\n}\n\nA1_N1 -> P1\nP1 -> A2_N1\n\n{\ncluster_1_inputs:cluster_1_inputs_1->A1_N1 //[minlen=3]\nA2_N1->cluster_1_outputs:cluster_1_outputs_1 //[minlen=5]\n}\n\n//{A1} -> {A1_N1}\n\n}","category":"page"}]
}
